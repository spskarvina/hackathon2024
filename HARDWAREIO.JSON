[
    {
        "id": "63457ec5faeef9c1",
        "type": "tab",
        "label": "LEDStrip",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f45ca3b9f9d9857e",
        "type": "group",
        "z": "63457ec5faeef9c1",
        "name": "Temp Test",
        "style": {
            "label": true
        },
        "nodes": [
            "fc2ed2e3a5fd7853",
            "b195ae2549557ba3",
            "2351a53e165a607c",
            "9e2a9cbc44e2f8bd",
            "797dbe23b77d3005"
        ],
        "x": 194,
        "y": 339,
        "w": 172,
        "h": 242
    },
    {
        "id": "d7a97b41930c4d95",
        "type": "group",
        "z": "63457ec5faeef9c1",
        "name": "CO2 Test",
        "style": {
            "label": true
        },
        "nodes": [
            "87dc415af6620537",
            "a921ce69fd345776"
        ],
        "x": 194,
        "y": 879,
        "w": 172,
        "h": 122
    },
    {
        "id": "fc2ed2e3a5fd7853",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "f45ca3b9f9d9857e",
        "name": "+35",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "35",
        "payloadType": "num",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "4a4fe2d8274c290c",
                "4bf9688fdc599aeb"
            ]
        ]
    },
    {
        "id": "4bf9688fdc599aeb",
        "type": "function",
        "z": "63457ec5faeef9c1",
        "name": "DegToHEX",
        "func": "function rgbToHex(r, g, b) {\n    // Ensure the values are in the range 0-255\n    const isValid = [r, g, b].every((c) => c >= 0 && c <= 255);\n    if (!isValid) {\n        throw new Error(\"Invalid RGB value. Each component must be between 0 and 255.\");\n    }\n\n    // Convert each component to a 2-digit hex value\n    const toHex = (component) => component.toString(16).padStart(2, '0');\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\nvar tep = msg.payload;\nvar check = 0;\n\n//40 > 30\nif (tep >= 29) {\n    check = tep - 30;\n    var r = 255;\n    var g = 0;\n    var b = 0;\n}\n//30 > 20\nelse if (tep >= 25) {\n    var r = 255;\n    var g = 225;\n    var b = 0;\n}\n//20 > 10\nelse if (tep >= 20) {\n    var r = 15;\n    var g = 255;\n    var b = 0;\n}\n//10 > 0\nelse if (tep >= 0) {\n    var r = 125;\n    var g = 145;\n    var b = 255;\n}\n//0 > -10\nelse {\n    var r = 0;\n    var g = 25;\n    var b = 255;\n}\n\nmsg.payload = rgbToHex(r, g, b);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [
            [
                "3c8c1468b08acb78",
                "41123c907d837905"
            ]
        ]
    },
    {
        "id": "8a3aed2a767f876f",
        "type": "mqtt in",
        "z": "63457ec5faeef9c1",
        "name": "Temperature",
        "topic": "node/push-button:1/thermometer/0:1/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 620,
        "wires": [
            [
                "4bf9688fdc599aeb",
                "a8b75e98ec68dd50",
                "4a4fe2d8274c290c"
            ]
        ]
    },
    {
        "id": "b195ae2549557ba3",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "f45ca3b9f9d9857e",
        "name": "+5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "4a4fe2d8274c290c",
                "4bf9688fdc599aeb"
            ]
        ]
    },
    {
        "id": "4a4fe2d8274c290c",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "Temp flow",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "3c8c1468b08acb78",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "Color flow",
        "rules": [
            {
                "t": "set",
                "p": "color",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 820,
        "wires": [
            [
                "a53e4822a81531bd"
            ]
        ]
    },
    {
        "id": "2351a53e165a607c",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "f45ca3b9f9d9857e",
        "name": "+15",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "4bf9688fdc599aeb",
                "4a4fe2d8274c290c"
            ]
        ]
    },
    {
        "id": "f56340aeba98fd24",
        "type": "mqtt out",
        "z": "63457ec5faeef9c1",
        "name": "Ans",
        "topic": "node/power-controller:0/led-strip/-/effect/set",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "29fba84a.b2af58",
        "x": 1410,
        "y": 820,
        "wires": []
    },
    {
        "id": "a53e4822a81531bd",
        "type": "function",
        "z": "63457ec5faeef9c1",
        "name": "Connecting",
        "func": "msg.payload = {\n    \"type\": flow.get(\"typ\"), \"wait\": 5000, \"color\": flow.get(\"color\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "f56340aeba98fd24",
                "15baf392173ad70a",
                "b3f991040f2c08c9"
            ]
        ]
    },
    {
        "id": "575aaccea2b3313f",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"icicle\", \"wait\":50, \"color\":\"#ff0000\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "f56340aeba98fd24",
                "b3f991040f2c08c9",
                "15baf392173ad70a"
            ]
        ]
    },
    {
        "id": "135dc8c07997d7ec",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "Reset Color flow",
        "rules": [
            {
                "t": "set",
                "p": "color",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "a53e4822a81531bd"
            ]
        ]
    },
    {
        "id": "dacb8218246cb62c",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "name": "RESET",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#000000",
        "payloadType": "str",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "135dc8c07997d7ec"
            ]
        ]
    },
    {
        "id": "a8b75e98ec68dd50",
        "type": "debug",
        "z": "63457ec5faeef9c1",
        "name": "Input test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 720,
        "wires": []
    },
    {
        "id": "9adf5d991a107a8d",
        "type": "mqtt in",
        "z": "63457ec5faeef9c1",
        "name": "CO2",
        "topic": "node/air-quality-monitor:0/co2-meter/-/concentration",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "6638ddf493c5eeaf",
                "a8b75e98ec68dd50",
                "9fa2a6dfeb90008a",
                "45a8e4e40d8dd59c"
            ]
        ]
    },
    {
        "id": "6638ddf493c5eeaf",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "CO2 flow",
        "rules": [
            {
                "t": "set",
                "p": "CO2",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "87dc415af6620537",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "d7a97b41930c4d95",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "500",
        "payloadType": "str",
        "x": 290,
        "y": 920,
        "wires": [
            [
                "6638ddf493c5eeaf",
                "9fa2a6dfeb90008a",
                "e0021ddd2835db73",
                "45a8e4e40d8dd59c"
            ]
        ]
    },
    {
        "id": "a921ce69fd345776",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "d7a97b41930c4d95",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3500",
        "payloadType": "str",
        "x": 290,
        "y": 960,
        "wires": [
            [
                "6638ddf493c5eeaf",
                "9fa2a6dfeb90008a",
                "e0021ddd2835db73",
                "45a8e4e40d8dd59c"
            ]
        ]
    },
    {
        "id": "9fa2a6dfeb90008a",
        "type": "function",
        "z": "63457ec5faeef9c1",
        "name": "MeasuringCO2",
        "func": "function rgbToHex(r, g, b) {\n    // Ensure the values are in the range 0-255\n    if ((r < 0 || r > 255) || (g < 0 || g > 255) || (b < 0 || b > 255)) {\n        throw new Error(\"Invalid RGB value. Each component must be between 0 and 255.\");\n    }\n\n    // Convert each component to a 2-digit hex value and concatenate\n    const toHex = (component) => component.toString(16).padStart(2, '0'); // Ensure 2 digits\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\nvar res = msg.payload;\n\nif(msg.payload>=3000) {\n    var r = 255;\n    var g = 0;\n    var b = 0;\n}\n\nmsg.payload = rgbToHex(r,g,b);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 5,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 820,
        "wires": [
            [
                "3c8c1468b08acb78",
                "41123c907d837905"
            ]
        ]
    },
    {
        "id": "41123c907d837905",
        "type": "debug",
        "z": "63457ec5faeef9c1",
        "name": "HexColor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 620,
        "wires": []
    },
    {
        "id": "9e2a9cbc44e2f8bd",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "f45ca3b9f9d9857e",
        "name": "+25",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "4bf9688fdc599aeb",
                "4a4fe2d8274c290c"
            ]
        ]
    },
    {
        "id": "797dbe23b77d3005",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "g": "f45ca3b9f9d9857e",
        "name": "-5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-5",
        "payloadType": "num",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "4bf9688fdc599aeb",
                "4a4fe2d8274c290c"
            ]
        ]
    },
    {
        "id": "15baf392173ad70a",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "LED flow",
        "rules": [
            {
                "t": "set",
                "p": "LED",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e0021ddd2835db73",
        "type": "debug",
        "z": "63457ec5faeef9c1",
        "name": "CO2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1000,
        "wires": []
    },
    {
        "id": "e0c9aa531292caa4",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "pulse-color typ",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "pulse-color",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "45a8e4e40d8dd59c",
        "type": "switch",
        "z": "63457ec5faeef9c1",
        "name": "Types",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "3000",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "3000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "6e31469e9a49dd75",
                "25d2e561502661cc"
            ],
            [
                "e0c9aa531292caa4"
            ]
        ]
    },
    {
        "id": "6e31469e9a49dd75",
        "type": "debug",
        "z": "63457ec5faeef9c1",
        "name": "types",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "25d2e561502661cc",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "stroboscope",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "stroboscope",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "b3f991040f2c08c9",
        "type": "debug",
        "z": "63457ec5faeef9c1",
        "name": "Ans test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 640,
        "wires": []
    },
    {
        "id": "2313d59f135de81e",
        "type": "mqtt in",
        "z": "63457ec5faeef9c1",
        "name": "Button reset",
        "topic": "node/push-button:1/push-button/-/event-count",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "135dc8c07997d7ec"
            ]
        ]
    },
    {
        "id": "0de845dc23750490",
        "type": "inject",
        "z": "63457ec5faeef9c1",
        "name": "START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "b01fddba0fda655a"
            ]
        ]
    },
    {
        "id": "b01fddba0fda655a",
        "type": "change",
        "z": "63457ec5faeef9c1",
        "name": "pulse-color START",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "pulse-color",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2a797f18c848b5eb",
        "type": "mqtt in",
        "z": "63457ec5faeef9c1",
        "name": "Temperature Button",
        "topic": "node/push-button:0/thermometer/0:1/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "4bf9688fdc599aeb",
                "a8b75e98ec68dd50",
                "4a4fe2d8274c290c"
            ]
        ]
    },
    {
        "id": "29fba84a.b2af58",
        "type": "mqtt-broker",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]
