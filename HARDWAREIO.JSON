[
    {
        "id": "234720a580dd5b8e",
        "type": "tab",
        "label": "LEDStrip",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ec17e8d751891a8b",
        "type": "group",
        "z": "234720a580dd5b8e",
        "name": "Temp Test",
        "style": {
            "label": true
        },
        "nodes": [
            "c1419bf93414a5db",
            "8352491ea2aafe0c",
            "db24bd59f9df920a",
            "cf455efe3894e5e2",
            "2d9b93d1c620d3fe"
        ],
        "x": 194,
        "y": 339,
        "w": 172,
        "h": 242
    },
    {
        "id": "306ddb44b333025c",
        "type": "group",
        "z": "234720a580dd5b8e",
        "name": "CO2 Test",
        "style": {
            "label": true
        },
        "nodes": [
            "62c8d6c4e6abbe11",
            "ea26b12e9fc5ed8c"
        ],
        "x": 194,
        "y": 879,
        "w": 172,
        "h": 122
    },
    {
        "id": "c1419bf93414a5db",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "ec17e8d751891a8b",
        "name": "+35",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "35",
        "payloadType": "num",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "35bbf54569280204",
                "db01d81c7138b691"
            ]
        ]
    },
    {
        "id": "db01d81c7138b691",
        "type": "function",
        "z": "234720a580dd5b8e",
        "name": "DegToHEX",
        "func": "function rgbToHex(r, g, b) {\n    // Ensure the values are in the range 0-255\n    const isValid = [r, g, b].every((c) => c >= 0 && c <= 255);\n    if (!isValid) {\n        throw new Error(\"Invalid RGB value. Each component must be between 0 and 255.\");\n    }\n\n    // Convert each component to a 2-digit hex value\n    const toHex = (component) => component.toString(16).padStart(2, '0');\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\nvar tep = msg.payload;\nvar check = 0;\n\n//40 > 30\nif (tep >= 30) {\n    check = tep - 30;\n    var r = 255;\n    var g = 0;\n    var b = 0;\n}\n//30 > 20\nelse if (tep >= 20) {\n    var r = 255;\n    var g = 225;\n    var b = 0;\n}\n//20 > 10\nelse if (tep >= 10) {\n    var r = 15;\n    var g = 255;\n    var b = 0;\n}\n//10 > 0\nelse if (tep >= 0) {\n    var r = 125;\n    var g = 145;\n    var b = 255;\n}\n//0 > -10\nelse {\n    var r = 0;\n    var g = 25;\n    var b = 255;\n}\n\nmsg.payload = rgbToHex(r, g, b);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 9,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 620,
        "wires": [
            [
                "7ab6227b35eddb8d",
                "f35ec17c03a4ad30"
            ]
        ]
    },
    {
        "id": "08ab8addea61bc1e",
        "type": "mqtt in",
        "z": "234720a580dd5b8e",
        "name": "Temperature",
        "topic": "node/air-quality-monitor:1/thermometer/0:1/temperature",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 620,
        "wires": [
            [
                "db01d81c7138b691",
                "da6be80267a25f8c",
                "35bbf54569280204"
            ]
        ]
    },
    {
        "id": "8352491ea2aafe0c",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "ec17e8d751891a8b",
        "name": "+5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 290,
        "y": 500,
        "wires": [
            [
                "35bbf54569280204",
                "db01d81c7138b691"
            ]
        ]
    },
    {
        "id": "35bbf54569280204",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "Temp flow",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7ab6227b35eddb8d",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "Color flow",
        "rules": [
            {
                "t": "set",
                "p": "color",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 820,
        "wires": [
            [
                "186b634bb7360cf3"
            ]
        ]
    },
    {
        "id": "db24bd59f9df920a",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "ec17e8d751891a8b",
        "name": "+15",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "15",
        "payloadType": "num",
        "x": 290,
        "y": 460,
        "wires": [
            [
                "db01d81c7138b691",
                "35bbf54569280204"
            ]
        ]
    },
    {
        "id": "c6048cdafe2c3809",
        "type": "mqtt out",
        "z": "234720a580dd5b8e",
        "name": "Ans",
        "topic": "node/power-controller:0/led-strip/-/effect/set",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "29fba84a.b2af58",
        "x": 1410,
        "y": 820,
        "wires": []
    },
    {
        "id": "186b634bb7360cf3",
        "type": "function",
        "z": "234720a580dd5b8e",
        "name": "Connecting",
        "func": "msg.payload = {\n    \"type\": flow.get(\"typ\"), \"wait\": 5000, \"color\": flow.get(\"color\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 2,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 820,
        "wires": [
            [
                "c6048cdafe2c3809",
                "9941dd9ee33d9483",
                "2fecf4b4b8b4589d"
            ]
        ]
    },
    {
        "id": "0440d51db6863b10",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "name": "Test",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"icicle\", \"wait\":50, \"color\":\"#110011\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 240,
        "wires": [
            [
                "c6048cdafe2c3809",
                "2fecf4b4b8b4589d",
                "9941dd9ee33d9483"
            ]
        ]
    },
    {
        "id": "f2934ee47c321394",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "Reset Color flow",
        "rules": [
            {
                "t": "set",
                "p": "color",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "186b634bb7360cf3"
            ]
        ]
    },
    {
        "id": "b56aa0138d9bbf9c",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "name": "RESET",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "#000000",
        "payloadType": "str",
        "x": 790,
        "y": 240,
        "wires": [
            [
                "f2934ee47c321394"
            ]
        ]
    },
    {
        "id": "da6be80267a25f8c",
        "type": "debug",
        "z": "234720a580dd5b8e",
        "name": "Input test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 720,
        "wires": []
    },
    {
        "id": "4ede83f5a7adb95a",
        "type": "mqtt in",
        "z": "234720a580dd5b8e",
        "name": "CO2",
        "topic": "node/air-quality-monitor:1/co2-meter/-/concentration",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "e4e4e202bf42fe4d",
                "da6be80267a25f8c",
                "1a16afa462b961cd",
                "bf8ee79727ca1db9"
            ]
        ]
    },
    {
        "id": "e4e4e202bf42fe4d",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "CO2 flow",
        "rules": [
            {
                "t": "set",
                "p": "CO2",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "62c8d6c4e6abbe11",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "306ddb44b333025c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3500",
        "payloadType": "str",
        "x": 290,
        "y": 960,
        "wires": [
            [
                "e4e4e202bf42fe4d",
                "1a16afa462b961cd",
                "48dfd3bd0deed9c3",
                "bf8ee79727ca1db9"
            ]
        ]
    },
    {
        "id": "1a16afa462b961cd",
        "type": "function",
        "z": "234720a580dd5b8e",
        "name": "MeasuringCO2",
        "func": "function rgbToHex(r, g, b) {\n    // Ensure the values are in the range 0-255\n    if ((r < 0 || r > 255) || (g < 0 || g > 255) || (b < 0 || b > 255)) {\n        throw new Error(\"Invalid RGB value. Each component must be between 0 and 255.\");\n    }\n\n    // Convert each component to a 2-digit hex value and concatenate\n    const toHex = (component) => component.toString(16).padStart(2, '0'); // Ensure 2 digits\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\nvar res = msg.payload;\n\nif(msg.payload>=3000) {\n    var r = 255;\n    var g = 0;\n    var b = 0;\n}\n\nmsg.payload = rgbToHex(r,g,b);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 5,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 820,
        "wires": [
            [
                "7ab6227b35eddb8d",
                "f35ec17c03a4ad30"
            ]
        ]
    },
    {
        "id": "f35ec17c03a4ad30",
        "type": "debug",
        "z": "234720a580dd5b8e",
        "name": "HexColor",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 620,
        "wires": []
    },
    {
        "id": "cf455efe3894e5e2",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "ec17e8d751891a8b",
        "name": "+25",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "25",
        "payloadType": "num",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "db01d81c7138b691",
                "35bbf54569280204"
            ]
        ]
    },
    {
        "id": "2d9b93d1c620d3fe",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "ec17e8d751891a8b",
        "name": "-5",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "-5",
        "payloadType": "num",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "db01d81c7138b691",
                "35bbf54569280204"
            ]
        ]
    },
    {
        "id": "9941dd9ee33d9483",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "LED flow",
        "rules": [
            {
                "t": "set",
                "p": "LED",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "48dfd3bd0deed9c3",
        "type": "debug",
        "z": "234720a580dd5b8e",
        "name": "CO2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1000,
        "wires": []
    },
    {
        "id": "52bed1a45c0618b4",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "pulse-color typ",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "pulse-color",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "bf8ee79727ca1db9",
        "type": "switch",
        "z": "234720a580dd5b8e",
        "name": "Types",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "3000",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "3000",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "5e957e65e7d56731",
                "3026db3f799ecb40"
            ],
            [
                "52bed1a45c0618b4"
            ]
        ]
    },
    {
        "id": "5e957e65e7d56731",
        "type": "debug",
        "z": "234720a580dd5b8e",
        "name": "types",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1120,
        "wires": []
    },
    {
        "id": "3026db3f799ecb40",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "stroboscope",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "stroboscope",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1030,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "2fecf4b4b8b4589d",
        "type": "debug",
        "z": "234720a580dd5b8e",
        "name": "Ans test",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 640,
        "wires": []
    },
    {
        "id": "90aee9c09c231728",
        "type": "mqtt in",
        "z": "234720a580dd5b8e",
        "name": "Button reset",
        "topic": "node/push-button:1/push-button/-/event-count",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "29fba84a.b2af58",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1050,
        "y": 560,
        "wires": [
            [
                "f2934ee47c321394"
            ]
        ]
    },
    {
        "id": "249c891ddee8d6f4",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "name": "START",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"icicle\", \"wait\":50, \"color\":\"#110011\"}",
        "payloadType": "str",
        "x": 790,
        "y": 180,
        "wires": [
            [
                "7d4b71affe56a77e",
                "c6048cdafe2c3809",
                "9941dd9ee33d9483",
                "2fecf4b4b8b4589d"
            ]
        ]
    },
    {
        "id": "7d4b71affe56a77e",
        "type": "change",
        "z": "234720a580dd5b8e",
        "name": "pulse-color START",
        "rules": [
            {
                "t": "set",
                "p": "typ",
                "pt": "flow",
                "to": "pulse-color",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ea26b12e9fc5ed8c",
        "type": "inject",
        "z": "234720a580dd5b8e",
        "g": "306ddb44b333025c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "500",
        "payloadType": "str",
        "x": 290,
        "y": 920,
        "wires": [
            [
                "bf8ee79727ca1db9",
                "1a16afa462b961cd",
                "48dfd3bd0deed9c3"
            ]
        ]
    },
    {
        "id": "29fba84a.b2af58",
        "type": "mqtt-broker",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    }
]
